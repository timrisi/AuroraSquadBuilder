{"Name":"Dropbox Core API iOS SDK","Id":1904,"Alias":"dropboxcoreapiios","Description":"The Core API provides a flexible way to read and write to Dropbox. It includes support for advanced functionality like search, revisions, and restoring files. While Drop-ins are simpler to integrate and use, the Core API can be a better fit for deeper integration.\n\nThe Core API is based on HTTP and OAuth and provides low-level calls to access and manipulate a user\u0027s Dropbox account.\n\n## Authenticating with Dropbox\n\nAdd the following lines of code to link a user\u0027s Dropbox account to your\napp:\n\n### In AppDelegate.cs\n\n```csharp\nusing Dropbox.CoreApi.iOS;\n...\n\n// To get your credentials, create your own Drobox App.\n// Visit the following link: https://www.dropbox.com/developers/apps\nstring appKey = \"DB_APP_KEY\";\nstring appSecret = \"DB_APP_SECRET\";\n\npublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n{\n\t\n\tvar session = new Session (appKey, appSecret, Session.RootDropbox);\n\t// The session that you have just created, will live through all the app\n\tSession.SharedSession = session;\n\t\n\t// ...\n\t\n\treturn true;\n}\n\npublic override bool OpenUrl (UIApplication application, NSUrl url, string sourceApplication, NSObject annotation)\n{\n\tif (Session.SharedSession.HandleOpenUrl (url) \u0026\u0026 Session.SharedSession.IsLinked) {\n\t\t// Do your magic after the app gets linked\n\t}\n}\n\n```\n\n### In Info.plist\n\nYou\u0027ll need to register the url scheme \"db-APP_KEY\" to complete the\nauthentication flow. Double-click on your app\u0027s Info.plist file, select\nthe Advanced Tab, find the URL Types Section, then click Add URL Type\nand set URL Schemes to db-APP_KEY (i.e. \"db-aaa111bbb2222\").\n\n### Link the user\n\nNow we\u0027re all set to start the authentication flow. We\u0027ll start by calling the `Session.LinkFromController (UIViewController)` method which will ask the user to authorize your app. The linking process will switch to the Dropbox mobile app if it\u0027s installed so the user doesn\u0027t need to log in again. Otherwise, a Dropbox authorization view will be presented from the specified view controller:\n\n```csharp\nbtnLink.TouchUpInside += (sender, e) =\u003e {\n\tif (!Session.SharedSession.IsLinked)\n\t\t// Ask for linking the app\n\t\tSession.SharedSession.LinkFromController (this);\n};\n```","Version":"1.3.13","Summary":"The Core API is based on HTTP and OAuth and provides low-level calls to access and manipulate a user\u0027s Dropbox account.","QuickStart":"The Core API provides a flexible way to read and write to Dropbox. \nIt includes support for advanced functionality like search, revisions, \nand restoring files. While Drop-ins are simpler to integrate and use, \nthe Core API can be a better fit for deeper integration.\n\nThe Core API is based on HTTP and OAuth and provides low-level calls \nto access and manipulate a user\u0027s Dropbox account.\n\n## Authenticating with Dropbox\n\nYou\u0027ll need to provide your app key and secret as well as the permission \nyou selected when creating the app. The permission will be represented \nby either the kDBRootAppFolder or kDBRootDropbox constants.\n\nOnce you have your app key and secret, you can create the DBSession \nobject for your app. To do this, add the following code in your \napplication delegate file:\n\n### In AppDelegate.cs\n\n```csharp\nusing Dropbox.CoreApi.iOS;\n...\n\n// To get your credentials, create your own Drobox App.\n// Visit the following link: https://www.dropbox.com/developers/apps\nstring appKey = \"DB_APP_KEY\";\nstring appSecret = \"DB_APP_SECRET\";\n\npublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n{\n\t\n\t// Create a new Dropbox Session, choose the type of access that your app has to your folders.\n\t// Session.RootAppFolder = The app will only have access to its own folder located in /Applications/AppName/\n\t// Session.RootDropbox = The app will have access to all the files that you have granted permission\n\tvar session = new Session (appKey, appSecret, Session.RootDropbox);\n\t// The session that you have just created, will live through all the app\n\tSession.SharedSession = session;\n\t\n\t// ...\n\t\n\treturn true;\n}\n\npublic override bool OpenUrl (UIApplication application, NSUrl url, string sourceApplication, NSObject annotation)\n{\n\tif (Session.SharedSession.HandleOpenUrl (url) \u0026\u0026 Session.SharedSession.IsLinked) {\n\t\t// Do your magic after the app gets linked\n\t}\n}\n\n```\n\n### In Info.plist\n\nYou\u0027ll need to register the url scheme \"db-APP_KEY\" to complete the\nauthentication flow. Double-click on your app\u0027s Info.plist file, select\nthe Advanced Tab, find the URL Types Section, then click Add URL Type\nand set URL Schemes to db-APP_KEY (i.e. \"db-aaa111bbb2222\").\n\n### Link the user\n\nNow we\u0027re all set to start the authentication flow. We\u0027ll start by calling \nthe `Session.LinkFromController (UIViewController)` method which will ask \nthe user to authorize your app. The linking process will switch to the \nDropbox mobile app if it\u0027s installed so the user doesn\u0027t need to log in again. \nOtherwise, a Dropbox authorization view will be presented from the specified \nview controller:\n\n```csharp\nbtnLink.TouchUpInside += (sender, e) =\u003e {\n\tif (!Session.SharedSession.IsLinked)\n\t\t// Ask for linking the app\n\t\tSession.SharedSession.LinkFromController (this);\n};\n```\n\n## Listing folders and files\n\nOnce you\u0027ve linked your app to a Dropbox account, you may want to list\nthe contents of your app\u0027s exclusive Dropbox folder. To achieve this,\nyou just need to create a RestClient object:\n\n```csharp\nvar restClient = new RestClient (Session.SharedSession);\n```\nand then call the following method:\n\n```csharp\nrestClient.LoadMetadata (dropboxPath);\n```\n\nAll the methods on RestClient are asynchronous, meaning they don\u0027t \nimmediately return the data they are meant to load. Each method has \nat least two corresponding events that get called when a request \neither succeeds or fails.\n\nTo handle files and folders received, you need to register a method \nto `MetadataLoaded` event;\n\n```csharp\nrestClient.MetadataLoaded += (object sender, RestClientMetadataLoadedEventArgs e) =\u003e {\n\t// If the path is a file, there is nothing to search\n\tif (!e.Metadata.IsDirectory) {\n\t\t// Alert the user that specified path is a file, not a directory\n\t}\n\t\n\tforeach (var item in e.Metadata.Contents) {\n\t\t// Work with each metadata file or folder\n\t}\n};\n```\n\nThe RestClient also have an event if something goes wrong when trying to get the files and folders:\n\n```csharp\nrestClient.LoadMetadataFailed += (object sender, RestClientErrorEventArgs e) =\u003e {\n\t// Handle the error\n};\n```\n\n## Working with files\n\n### Downloading files\n\nUntil now, you only have the Path to the file or directory, but you don\u0027t\nhave the file itself. To download the desired file, you just need \nthe `LoadFile` method, the DropboxPath and a local path where you \nwant it to be downloaded. The local path must include the local name\nthat will be saved:\n\n```csharp\nrestClient.LoadFile (dropboxPath, localPath);\n```\n\nAs well as the listing files process, downloading a file has its\nsuccess and fail events:\n\n```csharp\nrestClient.FileLoaded += (object sender, RestClientFileLoadedEventArgs e) =\u003e {\n\t// Do something when the file is loaded\n};\n\nrestClient.LoadFileFailed += (object sender, RestClientErrorEventArgs e) =\u003e {\n\t// Do something if the request failed\n};\n```\n\n### Uploading files\n\nTo upload a file to Dropbox, you just need to call the following method:\n\n```csharp\nrestClient.UploadFile (filename, dropboxPath, null, localPath);\n```\n\nWhen calling this method, filename is the name of the file and dropboxPath\nis the folder where this file will be placed in the user\u0027s Dropbox. If you\nare uploading a new file, set the parentRev to null, which will prevent\nuploads from overwriting existing files, if you are working with an existing\nfile, pass the revision value of the metadata file, so the file can be\nupdated correctly, localPath is where the file lives in the device.\n\nAs well as the other process, to handle the success and fail events,\nuse the following events:\n\n\n\nInitially, your app\u0027s folder in your user\u0027s Dropbox won\u0027t contain any\nfiles, so you\u0027ll need to create one:\n\n```csharp\nrestClient.FileUploaded += (sender, e) =\u003e {\n\t// Once the file is on Dropbox, do something\n};\n\nrestClient.LoadFileFailed += (sender, e) =\u003e {\n\t// Handle if something went wrong with the upload of the file\n};\n```","Hash":"b872cc5c1b3ca88763ce8c10d644394c","TargetPlatforms":["ios"],"TrialHash":null}